import fs, { type Stats } from "fs";
import Path from "path";

const WORKING_DIR = process.cwd();

const args = process.argv.slice(2);

const OPTION_HELP = args.includes("--help") || args.includes("-h");
const OPTION_DUMP = args.includes("--dump") || args.includes("-d");
const OPTION_QUIET = args.includes("--quiet") || args.includes("-q");
function log(...data: any[]) {
  if (!OPTION_QUIET) {
    console.log(...data);
  }
}

if (OPTION_HELP) {
  console.log("PHPAuto by Lucasion");
  console.log("Usage: phpauto [options]");
  console.log("Options:");
  console.log("  --help, -h    Show this help message");
  console.log("  --dump, -d    Dump the autoload file to the current directory");
  console.log("  --quiet, -q   Do not output any information");
  process.exit(0);
}


function readDir(dir: string): string[] {
  const phpFiles: string[] = [];
  const files = fs.readdirSync(dir);

  files.forEach((file) => {
    const filePath = `${dir}/${file}`;
    const stats = fs.statSync(filePath);

    if (stats.isDirectory()) {
      phpFiles.push(...readDir(filePath));
    } else {
      if (filePath.endsWith(".php")) {
        phpFiles.push(filePath);
      }
    }
  });

  return phpFiles;
}

log("Reading all PHP files in the current directory...");
const allPhpFiles: string[] = readDir(WORKING_DIR);
log("Found the following PHP files:");
log(allPhpFiles);

// Read all "namespace" declarations
const namespaceClasses: Record<string, string> = {}; // { namespace: filepath }
allPhpFiles.forEach((file) => {
  const fileContent = fs.readFileSync(file, "utf-8");
  const lines = fileContent.split("\n");
  // Go line by line finding the namespace and its classes
  let namespace = "";
  lines.forEach((line) => {
    const ns = line.match(/^\s*namespace\s*/);
    if (ns) {
      namespace = line.replace("namespace", "").trim().replace(";", "");
    }
    const classMatch = line.match(/^\s*class\s+(\w*)/);
    if (classMatch) {
      const className = classMatch[1];
      const fullClassName = `${namespace}\\${className}`;
      namespaceClasses[fullClassName] = file;
    }
  });
});

log("Found the following namespaces:");
log(namespaceClasses);

if (OPTION_DUMP) {
  const autoloadFile = `${WORKING_DIR}/autoload.php`;
  let autoloadContent = "<?php\n";
  autoloadContent += "// Autogenerated by PHPAuto by Lucasion\n";
  autoloadContent += "// DO NOT MODIFY THIS FILE\n";
  autoloadContent += "// To regenerate this file, run `phpauto -d` in the folder where this file is.\n";
  autoloadContent += "\n";
  autoloadContent += "$__classMap__ = [\n";
  Object.keys(namespaceClasses).forEach((className) => {
    autoloadContent += `  "${className.replace(/\\/g, "\\\\")}" => __DIR__ . "/${Path.relative(WORKING_DIR, namespaceClasses[className])}",\n`;
  });
  autoloadContent += "];\n";
  autoloadContent += "spl_autoload_register(function($class) use ($__classMap__) {\n";
  autoloadContent += "  if (isset($__classMap__[$class])) {\n";
  autoloadContent += "    require_once $__classMap__[$class];\n";
  autoloadContent += "  }\n";
  autoloadContent += "});\n";
  fs.writeFileSync(autoloadFile, autoloadContent);
  log(`Autoload file written to ${autoloadFile}`);
}